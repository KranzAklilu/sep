// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Event {
  id String @id @default(uuid())

  name          String
  description   String
  Tags          Tag[]
  date     DateTime
  startTime     String
  endTime       String
  attendeeLimit Int
  price         Int
  featured      Boolean  @default(false)
  acceptedByVenue Boolean @default(false)
  rejectedByVenue Boolean @default(false)

  vendorInstruction String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  EventSession  EventSession[]
  EventAttendee EventAttendee[]
  Feedback      Feedback[]
  EventVendor   EventVendor[]
  Owner         User?           @relation(fields: [ownerId], references: [id])
  ownerId       String?
  EventVenue    EventVenue[]
  Venue         Venue?    @relation(fields: [venueId], references: [id])
  venueId       String?
}

model EventSession {
  id String @id @default(uuid())

  name String
  time DateTime

  createdAt DateTime @default(now())
  Event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?
}

model Settings {
  id String @id @default(uuid())

  telebirrAccount String?
  cbeAccount      String?
  boaAccount      String?

  createdAt DateTime @default(now())

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Feedback {
  id String @id @default(uuid())

  rating  Int
  comment String

  Attendee   User?   @relation(fields: [attendeeId], references: [id])
  attendeeId String?

  event Event @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  eventId   String
}

model Payment {
  id String @id @default(uuid())

  method String
  amount Float
  status String

  createdAt DateTime @default(now())
}

model Tag {
  id Int @id @default(autoincrement())

  label String

  createdAt DateTime @default(now())
  Event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?
}

model Venue {
  id String @id @default(uuid())

  name          String
  description   String
  location      String
  capacity      Int
  phone         String
  pricePerHour  Int
  availableDate Int[]
  openHour      String
  closeHour     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  Event     Event[]

  Owner      User         @relation(fields: [ownerId], references: [id])
  ownerId    String       @unique
  EventVenue EventVenue[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EventVenue {
  id String @id @default(cuid())

  venue    Venue   @relation(fields: [venueId], references: [id])
  event    Event   @relation(fields: [eventId], references: [id])
  accepted Boolean @default(false)
  rejected Boolean @default(false)

  createdAt DateTime @default(now())
  venueId   String
  eventId   String
}

model EventVendor {
  id String @id @default(cuid())

  user     User    @relation(fields: [userId], references: [id])
  event    Event   @relation(fields: [eventId], references: [id])
  accepted Boolean @default(false)

  createdAt DateTime @default(now())
  userId    String
  eventId   String
}

model EventAttendee {
  id String @id @default(cuid())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  userId    String
  eventId   String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  address       String?
  password      String?
  phone         String?
  role          UserRole  @default(Attendee)
  Account       Account[]
  Session       Session[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  Feedback      Feedback[]
  EventOwner    Event[]
  EventAttendee EventAttendee[]
  Setting       Settings?
  EventVendor   EventVendor[]
  Venue         Venue?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  EventPlanner
  VenueOwner
  Attendee
}
